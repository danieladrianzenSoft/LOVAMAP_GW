import { observer } from "mobx-react-lite";
import React, { useEffect, useState } from "react";
import { useStore } from "../../app/stores/store";
import { GroupedTags, Tag, displayNameMap } from "../../app/models/tag";
import MultiSelectDropdown from "../../app/common/form/multiselect-dropdown";
import { FaCaretDown } from "react-icons/fa";

const ScaffoldGroupFilters: React.FC = () => {
	const {resourceStore, scaffoldGroupStore, commonStore} = useStore();
	const {getAutogeneratedTags} = resourceStore;

	const isLoggedIn = commonStore.isLoggedIn();
	const [groupedTags, setGroupedTags] = useState<GroupedTags>({});
    const [selectedTags, setSelectedTags] = useState<{ [key: string]: Tag[] }>({});
    const [particleSizes, setParticleSizes] = useState<{id: number, label: string}[]>([]);
    const [selectedParticleSizeIds, setSelectedParticleSizeIds] = useState<number[]>([]);
    const [otherFiltersVisible, setOtherFiltersVisible] = useState<boolean>(false);

	useEffect(() => {
        getAutogeneratedTags().then(fetchedTags => {
            if (fetchedTags) {
                const groups = fetchedTags.reduce<GroupedTags>((acc, tag) => {
                    const groupKey = tag.referenceProperty;
                    if (displayNameMap[groupKey]) {
                        acc[groupKey] = acc[groupKey] || [];
                        acc[groupKey].push(tag);
                    }
                    return acc;
                }, {});
                setGroupedTags(groups);
            }
        }).catch(error => {
            console.error("Error fetching tags:", error);
        });
    }, [getAutogeneratedTags]);

	useEffect(() => {
		// Flatten all selected tags from each group into a single array
		const allSelectedTags = Object.values(selectedTags).flat();
	
		// Check the login status and call the appropriate function
		if (!isLoggedIn) {
			scaffoldGroupStore.getPublicScaffoldGroups(allSelectedTags, selectedParticleSizeIds);
		} else {
			scaffoldGroupStore.getSummarizedScaffoldGroups(allSelectedTags, selectedParticleSizeIds);
		}
	}, [selectedTags, selectedParticleSizeIds, isLoggedIn, scaffoldGroupStore]);

    useEffect(() => {
        const sizes = setParticleSizeFilterOptions();
        setParticleSizes(sizes.map((size, index) => ({ id:size, label: `${size}um` })));
    }, []);

	const handleSelectTag = (groupKey: string, tag: Tag) => {
        setSelectedTags(prev => {
            const updatedTags = { ...prev };
    
            if (updatedTags[groupKey] && updatedTags[groupKey].find(t => t.id === tag.id)) {
                // Remove the tag if it's already selected
                updatedTags[groupKey] = updatedTags[groupKey].filter(t => t.id !== tag.id);
            } else {
                // Add the tag if it's not already selected
                updatedTags[groupKey] = updatedTags[groupKey] ? [...updatedTags[groupKey], tag] : [tag];
            }
            // Flatten the tags from all groups into a single array
    
            return updatedTags;
        });
    };

    const setParticleSizeFilterOptions = () => {
        const a = 40;
        const b = 200;
        const c = 10;
        let sizes = [];
        for (let i = a; i <= b; i += c) {
            sizes.push(i);
        }
        return sizes;
    };

    const handleParticleSizeSelect = (item: { id: number, label: string }) => {
        const index = selectedParticleSizeIds.indexOf(item.id);
        if (index > -1) {
            setSelectedParticleSizeIds(prev => prev.filter(id => id !== item.id));
        } else {
            setSelectedParticleSizeIds(prev => [...prev, item.id]);
        }
    };

	return (
        <div className="container mx-auto">
            <div className="flex flex-wrap text-center"> 
                {Object.entries(groupedTags).map(([key, tags]) => (
                    <div key={key} className="w-1/3 p-2">
                        <MultiSelectDropdown
                            groupName={displayNameMap[key] || key}
                            items={tags}
                            selectedItemIds={selectedTags[key]?.map(tag => tag.id) || []}
                            renderItem={(tag) => tag.name}
                            onItemSelect={(tag) => handleSelectTag(key, tag)}
                        />
                    </div>
                ))}
            </div>
            <div className="container mx-auto">
                <div className="flex items-center text-left cursor-pointer hover:underline" onClick={() => setOtherFiltersVisible(!otherFiltersVisible)}>
                    <p className="mr-1 text-gray-700">Other filters</p>
                    <div className={`transition-transform duration-300 transform ${otherFiltersVisible ? 'rotate-0' : 'rotate-[-90deg]'}`}>
                        <FaCaretDown />
                    </div>
                </div>
				<div className="mt-4">
					{otherFiltersVisible && 
						<div className="flex flex-wrap text-center">
							<div className="w-1/3 p-2">
								<MultiSelectDropdown
									groupName="PARTICLE SIZES"
									items={particleSizes}
									selectedItemIds={selectedParticleSizeIds}
									renderItem={item => item.label}
									onItemSelect={handleParticleSizeSelect}
								/>
							</div>
						</div>
					}
				</div>
            </div>
        </div>
    );
}

export default observer(ScaffoldGroupFilters)