
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Data;
using Data.Models;
using Repositories.IRepositories;
using Infrastructure.DTOs;
using Infrastructure.Helpers;
using Services.IServices;
using Microsoft.Extensions.Logging;

namespace Services.Services
{	public class ScaffoldGroupService : IScaffoldGroupService
	{
		private readonly DataContext _context;
		private readonly IModelMapper _modelMapper;
		private readonly IUserAuthHelper _userAuthHelper;
		private readonly IScaffoldGroupRepository _scaffoldGroupRepository;
		private readonly IDescriptorService _descriptorService;
		private readonly IDownloadService _downloadService;
		private readonly ITagService _tagService;
		private readonly ILogger<ScaffoldGroupService> _logger;

		public ScaffoldGroupService(DataContext context, IModelMapper modelMapper, 
			IScaffoldGroupRepository scaffoldGroupRepository, IDescriptorService descriptorService, 
			IDownloadService downloadService, ITagService tagService, 
			IUserAuthHelper userAuthHelper, ILogger<ScaffoldGroupService> logger)
		{
			_context = context;
			_modelMapper = modelMapper;
			_userAuthHelper = userAuthHelper;
			_scaffoldGroupRepository = scaffoldGroupRepository;
			_descriptorService = descriptorService;
			_downloadService = downloadService;
			_tagService = tagService;
			_logger = logger;
		}

		public async Task<(bool Succeeded, string ErrorMessage, ScaffoldGroupBaseDto? CreatedScaffoldGroup)> CreateScaffoldGroup(ScaffoldGroupToCreateDto scaffoldGroupToCreate, string? userId)
		{
			var (succeeded, errorMessage, createdScaffoldGroups) = await CreateScaffoldGroups([scaffoldGroupToCreate], userId);

			return (succeeded, errorMessage, createdScaffoldGroups?.FirstOrDefault());
		}

		public async Task<(bool Succeeded, string ErrorMessage, IEnumerable<ScaffoldGroupBaseDto>? CreatedScaffoldGroups)> CreateScaffoldGroups(IEnumerable<ScaffoldGroupToCreateDto> scaffoldGroupsToCreate, string? userId)
		{
			try
			{
				var createdScaffoldGroups = new List<ScaffoldGroupBaseDto>();
				foreach (var dto in scaffoldGroupsToCreate)
				{
					var isAdmin = false;
					if (!string.IsNullOrWhiteSpace(userId))
					{
						isAdmin = await _userAuthHelper.IsInRole(userId, "administrator");
						dto.UploaderId = userId;
					}

					var scaffoldGroup = await _modelMapper.MapToScaffoldGroup(dto);

					if (scaffoldGroup.UploaderId != null && isAdmin == true)
					{
						scaffoldGroup.IsPublic = true;
					}

					if (scaffoldGroup.UploaderId == null)
					{
						var uploader = await _userAuthHelper.GetFirstUserByRoleAsync("administrator");
						if (uploader != null)
						{
							scaffoldGroup.Uploader = uploader;  // Attach the uploader object
							scaffoldGroup.UploaderId = uploader.Id;  // Ensure the ID is set
							scaffoldGroup.IsPublic = true;
						}
					}

					var autogeneratedTags = await _tagService.GetAutogeneratedTagsForScaffold(scaffoldGroup);

					foreach (var scaffold in scaffoldGroup.Scaffolds)
					{
						scaffold.ScaffoldTags = autogeneratedTags.ToList();
					}

					_scaffoldGroupRepository.Add(scaffoldGroup);
					var scaffoldGroupToReturn = _modelMapper.MapToScaffoldGroupSummaryDto(scaffoldGroup, userId ?? scaffoldGroup.UploaderId!);
					createdScaffoldGroups.Add(scaffoldGroupToReturn);
				}

				await _context.SaveChangesAsync();
				return (true, "", createdScaffoldGroups);
			}
			catch (Exception ex)
			{
				_logger.LogError(ex, "Failed to create scaffold groups");
				return (false, "UnexpectedError", null);
			}
		}

		public async Task<(bool Succeeded, string ErrorMessage, ScaffoldGroupBaseDto? scaffoldGroup)> GetScaffoldGroup(int id, string userId, int? numReplicates)
		{
			try
			{
				ScaffoldGroup? scaffoldGroup = await _scaffoldGroupRepository.Get(id); 
				if (scaffoldGroup == null){
					return (false, "NotFound", null);
				}

				if (scaffoldGroup.IsPublic == false && scaffoldGroup.UploaderId != userId)
				{
					return (false, "Unauthorized", null);
				}

				var scaffolds = numReplicates.HasValue ? scaffoldGroup.Scaffolds.Take(numReplicates.Value) : scaffoldGroup.Scaffolds;
       			var scaffoldIds = scaffolds.Select(s => s.Id).ToList();

				var (globalDescriptors, poreDescriptors, otherDescriptors) = await _descriptorService.GetFilteredDescriptorsForScaffolds(scaffoldIds, new ScaffoldFilter());

				var detailedDto = _modelMapper.MapScaffoldGroupToDto(scaffoldGroup, scaffolds, userId, true);

				var descriptorTypeIds = globalDescriptors.Select(g => g.DescriptorTypeId)
									.Concat(poreDescriptors.Select(p => p.DescriptorTypeId))
									.Concat(otherDescriptors.Select(o => o.DescriptorTypeId))
									.Distinct().ToList();

				// Create download record
				await _downloadService.CreateDownloadRecord(userId, scaffoldIds, descriptorTypeIds);

				return (true, "", detailedDto);

			}
			catch (Exception ex)
			{
				_logger.LogError(ex, "Failed to get scaffold group {id}", id);
        		return (false, "UnexpectedError", null);
			}
		}

		public async Task<(bool Succeeded, string ErrorMessage, ICollection<ScaffoldGroupBaseDto>? scaffoldGroups)> GetFilteredScaffoldGroups(ScaffoldFilter filter, string userId, bool isDetailed = false)
		{
			try
			{
				//IEnumerable<ScaffoldGroup>? scaffoldGroups = await _scaffoldGroupRepository.GetFilteredScaffoldGroups(filter, userId); 
				//var userIdForFilter = userId ?? await _userAuthHelper.GetFirstUserByRoleAsync(userId, filter.Role);
				if (userId == null)
				{
					var user = await _userAuthHelper.GetFirstUserByRoleAsync("administrator");
					userId = user!.Id;
					isDetailed = false;
				}

				IEnumerable<ScaffoldGroup>? scaffoldGroups = await _scaffoldGroupRepository.GetFilteredScaffoldGroupsByRelevance(filter, userId); 

				if (scaffoldGroups == null)
				{
					return (false, "NotFound", null);
				}

				ICollection<ScaffoldGroupBaseDto> scaffoldGroupsToReturn = [];
				foreach (var scaffoldGroup in scaffoldGroups)
				{
					var scaffoldIds = scaffoldGroup.Scaffolds.Select(s => s.Id).ToList();
					var (globalDescriptors, poreDescriptors, otherDescriptors) = await _descriptorService.GetFilteredDescriptorsForScaffolds(scaffoldIds, filter);
					var scaffoldGroupToReturn = _modelMapper.MapScaffoldGroupToDto(scaffoldGroup, scaffoldGroup.Scaffolds, userId, isDetailed);
					scaffoldGroupsToReturn.Add(scaffoldGroupToReturn);
				}

				return (true, "", scaffoldGroupsToReturn.ToList());

			}
			catch (Exception ex)
			{
				_logger.LogError(ex, "Failed to get filtered scaffold groups");
        		return (false, "UnexpectedError", null);
			}
		}


	}
}


