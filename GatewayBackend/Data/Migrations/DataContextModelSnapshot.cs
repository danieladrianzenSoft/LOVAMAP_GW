// <auto-generated />
using System;
using System.Text.Json;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.DescriptorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PublicationId")
                        .HasColumnType("integer");

                    b.Property<string>("SubCategory")
                        .HasColumnType("text");

                    b.Property<string>("TableLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("DescriptorTypes");
                });

            modelBuilder.Entity("Data.Models.DescriptorTypeDownload", b =>
                {
                    b.Property<int>("DescriptorTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("DownloadId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("DescriptorTypeId", "DownloadId");

                    b.HasIndex("DownloadId");

                    b.ToTable("DescriptorTypeDownloads");
                });

            modelBuilder.Entity("Data.Models.Download", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DownloaderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DownloaderId");

                    b.ToTable("Downloads");
                });

            modelBuilder.Entity("Data.Models.GlobalDescriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DescriptorTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ScaffoldId")
                        .HasColumnType("integer");

                    b.Property<double?>("ValueDouble")
                        .HasColumnType("double precision");

                    b.Property<int?>("ValueInt")
                        .HasColumnType("integer");

                    b.Property<string>("ValueString")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DescriptorTypeId");

                    b.HasIndex("ScaffoldId");

                    b.ToTable("GlobalDescriptors");
                });

            modelBuilder.Entity("Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ScaffoldGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("ScaffoldId")
                        .HasColumnType("integer");

                    b.Property<string>("UploaderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScaffoldGroupId");

                    b.HasIndex("ScaffoldId");

                    b.HasIndex("UploaderId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Data.Models.InputGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContainerShape")
                        .HasColumnType("text");

                    b.Property<int?>("ContainerSize")
                        .HasColumnType("integer");

                    b.Property<int?>("Dx")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAnisotropic")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumVoxels")
                        .HasColumnType("integer");

                    b.Property<int>("ScaffoldGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScaffoldGroupId")
                        .IsUnique();

                    b.ToTable("InputGroups");
                });

            modelBuilder.Entity("Data.Models.OtherDescriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DescriptorTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ScaffoldId")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("Values")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("DescriptorTypeId");

                    b.HasIndex("ScaffoldId");

                    b.ToTable("OtherDescriptors");
                });

            modelBuilder.Entity("Data.Models.ParticlePropertyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Dispersity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Friction")
                        .HasColumnType("text");

                    b.Property<int>("InputGroupId")
                        .HasColumnType("integer");

                    b.Property<double>("MeanSize")
                        .HasColumnType("double precision");

                    b.Property<double>("Proportion")
                        .HasColumnType("double precision");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("SizeDistribution")
                        .HasColumnType("jsonb");

                    b.Property<string>("SizeDistributionType")
                        .HasColumnType("text");

                    b.Property<double?>("StandardDeviationSize")
                        .HasColumnType("double precision");

                    b.Property<string>("Stiffness")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InputGroupId");

                    b.ToTable("ParticlePropertyGroups");
                });

            modelBuilder.Entity("Data.Models.PoreDescriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DescriptorTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ScaffoldId")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("Values")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("DescriptorTypeId");

                    b.HasIndex("ScaffoldId");

                    b.ToTable("PoreDescriptors");
                });

            modelBuilder.Entity("Data.Models.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Citation")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Doi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Journal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Data.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Data.Models.Scaffold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ReplicateNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("ScaffoldGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScaffoldGroupId");

                    b.ToTable("Scaffolds");
                });

            modelBuilder.Entity("Data.Models.ScaffoldDownload", b =>
                {
                    b.Property<int>("ScaffoldId")
                        .HasColumnType("integer");

                    b.Property<int>("DownloadId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ScaffoldId", "DownloadId");

                    b.HasIndex("DownloadId");

                    b.ToTable("ScaffoldDownloads");
                });

            modelBuilder.Entity("Data.Models.ScaffoldGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSimulated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PublicationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UploaderId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UploaderId");

                    b.ToTable("ScaffoldGroups");
                });

            modelBuilder.Entity("Data.Models.ScaffoldTag", b =>
                {
                    b.Property<int>("ScaffoldId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAutoGenerated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.HasKey("ScaffoldId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ScaffoldTags");
                });

            modelBuilder.Entity("Data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAutoGenerated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceProperty")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Models.DescriptorType", b =>
                {
                    b.HasOne("Data.Models.Publication", "Publication")
                        .WithMany("DescriptorTypes")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Data.Models.DescriptorTypeDownload", b =>
                {
                    b.HasOne("Data.Models.DescriptorType", "DescriptorType")
                        .WithMany("DescriptorTypeDownloads")
                        .HasForeignKey("DescriptorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Download", "Download")
                        .WithMany("DescriptorTypeDownloads")
                        .HasForeignKey("DownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptorType");

                    b.Navigation("Download");
                });

            modelBuilder.Entity("Data.Models.Download", b =>
                {
                    b.HasOne("Data.Models.User", "Downloader")
                        .WithMany("Downloads")
                        .HasForeignKey("DownloaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Downloader");
                });

            modelBuilder.Entity("Data.Models.GlobalDescriptor", b =>
                {
                    b.HasOne("Data.Models.DescriptorType", "DescriptorType")
                        .WithMany("GlobalDescriptors")
                        .HasForeignKey("DescriptorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Scaffold", "Scaffold")
                        .WithMany("GlobalDescriptors")
                        .HasForeignKey("ScaffoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptorType");

                    b.Navigation("Scaffold");
                });

            modelBuilder.Entity("Data.Models.Image", b =>
                {
                    b.HasOne("Data.Models.ScaffoldGroup", "ScaffoldGroup")
                        .WithMany("Images")
                        .HasForeignKey("ScaffoldGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Data.Models.Scaffold", "Scaffold")
                        .WithMany("Images")
                        .HasForeignKey("ScaffoldId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.User", "Uploader")
                        .WithMany("UploadedImages")
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Scaffold");

                    b.Navigation("ScaffoldGroup");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Data.Models.InputGroup", b =>
                {
                    b.HasOne("Data.Models.ScaffoldGroup", "ScaffoldGroup")
                        .WithOne("InputGroup")
                        .HasForeignKey("Data.Models.InputGroup", "ScaffoldGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScaffoldGroup");
                });

            modelBuilder.Entity("Data.Models.OtherDescriptor", b =>
                {
                    b.HasOne("Data.Models.DescriptorType", "DescriptorType")
                        .WithMany("OtherDescriptors")
                        .HasForeignKey("DescriptorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Scaffold", "Scaffold")
                        .WithMany("OtherDescriptors")
                        .HasForeignKey("ScaffoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptorType");

                    b.Navigation("Scaffold");
                });

            modelBuilder.Entity("Data.Models.ParticlePropertyGroup", b =>
                {
                    b.HasOne("Data.Models.InputGroup", "InputGroup")
                        .WithMany("ParticlePropertyGroups")
                        .HasForeignKey("InputGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputGroup");
                });

            modelBuilder.Entity("Data.Models.PoreDescriptor", b =>
                {
                    b.HasOne("Data.Models.DescriptorType", "DescriptorType")
                        .WithMany("PoreDescriptors")
                        .HasForeignKey("DescriptorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Scaffold", "Scaffold")
                        .WithMany("PoreDescriptors")
                        .HasForeignKey("ScaffoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptorType");

                    b.Navigation("Scaffold");
                });

            modelBuilder.Entity("Data.Models.Scaffold", b =>
                {
                    b.HasOne("Data.Models.ScaffoldGroup", "ScaffoldGroup")
                        .WithMany("Scaffolds")
                        .HasForeignKey("ScaffoldGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ScaffoldGroup");
                });

            modelBuilder.Entity("Data.Models.ScaffoldDownload", b =>
                {
                    b.HasOne("Data.Models.Download", "Download")
                        .WithMany("ScaffoldDownloads")
                        .HasForeignKey("DownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Scaffold", "Scaffold")
                        .WithMany("ScaffoldDownloads")
                        .HasForeignKey("ScaffoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Download");

                    b.Navigation("Scaffold");
                });

            modelBuilder.Entity("Data.Models.ScaffoldGroup", b =>
                {
                    b.HasOne("Data.Models.Publication", "Publication")
                        .WithMany("ScaffoldGroups")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Models.User", "Uploader")
                        .WithMany("ScaffoldGroups")
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Publication");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Data.Models.ScaffoldTag", b =>
                {
                    b.HasOne("Data.Models.Scaffold", "Scaffold")
                        .WithMany("ScaffoldTags")
                        .HasForeignKey("ScaffoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Tag", "Tag")
                        .WithMany("ScaffoldTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scaffold");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.DescriptorType", b =>
                {
                    b.Navigation("DescriptorTypeDownloads");

                    b.Navigation("GlobalDescriptors");

                    b.Navigation("OtherDescriptors");

                    b.Navigation("PoreDescriptors");
                });

            modelBuilder.Entity("Data.Models.Download", b =>
                {
                    b.Navigation("DescriptorTypeDownloads");

                    b.Navigation("ScaffoldDownloads");
                });

            modelBuilder.Entity("Data.Models.InputGroup", b =>
                {
                    b.Navigation("ParticlePropertyGroups");
                });

            modelBuilder.Entity("Data.Models.Publication", b =>
                {
                    b.Navigation("DescriptorTypes");

                    b.Navigation("ScaffoldGroups");
                });

            modelBuilder.Entity("Data.Models.Scaffold", b =>
                {
                    b.Navigation("GlobalDescriptors");

                    b.Navigation("Images");

                    b.Navigation("OtherDescriptors");

                    b.Navigation("PoreDescriptors");

                    b.Navigation("ScaffoldDownloads");

                    b.Navigation("ScaffoldTags");
                });

            modelBuilder.Entity("Data.Models.ScaffoldGroup", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("InputGroup")
                        .IsRequired();

                    b.Navigation("Scaffolds");
                });

            modelBuilder.Entity("Data.Models.Tag", b =>
                {
                    b.Navigation("ScaffoldTags");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Navigation("Downloads");

                    b.Navigation("ScaffoldGroups");

                    b.Navigation("UploadedImages");
                });
#pragma warning restore 612, 618
        }
    }
}
