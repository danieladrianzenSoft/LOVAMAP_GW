using System;
using System.Web;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Repositories.IRepositories;
using Data;
using Data.Models;

namespace Repositories.Repositories
{
	public class TagRepository : ITagRepository
	{
		private readonly DataContext _context;

		public TagRepository(DataContext context)
		{
			_context = context;
		}

		public bool HasChanges()
		{
			return _context.ChangeTracker.HasChanges();
		}
		public void Add(Tag tag)
		{
			_context.Tags.Add(tag);
		}
		public async Task<Tag?> GetTagById(int id)
		{
			return await _context.Tags.FindAsync(id);
		}
		public async Task<List<Tag>> GetTagsByIds(ICollection<int> ids)
		{
			return await _context.Tags.Where(t => ids.Contains(t.Id) && t.IsAutoGenerated).ToListAsync();
		}
		public async Task<Tag?> GetTagByName(string name)
		{
			return await _context.Tags.Where(t => t.Name == name).FirstOrDefaultAsync();
		}

		public async Task<List<int>> GetAutogeneratedTagIdsFromNames(ICollection<string> names)
		{
			var cleanNames = names
				.Where(n => !string.IsNullOrWhiteSpace(n))
				.Select(n => n.Trim().ToLower())
				.ToList();
			return await _context.Tags
				.Where(t => t.IsAutoGenerated && cleanNames.Contains(t.Name.ToLower()))
				.Select(t => t.Id)
				.Distinct()
				.ToListAsync();
		}
		public async Task<ICollection<Tag>> GetAutoGeneratedTags()
		{
			return await _context.Tags.Where(t => t.IsAutoGenerated == true).OrderBy(t => t.Name).ToListAsync();
		}

		public async Task<Dictionary<int, List<string>>> GetTagNamesForScaffoldGroups(IEnumerable<int> scaffoldGroupIds, string userId)
		{
			var tags = await (from s in _context.Scaffolds
							join st in _context.ScaffoldTags on s.Id equals st.ScaffoldId
							join t in _context.Tags on st.TagId equals t.Id
							where scaffoldGroupIds.Contains(s.ScaffoldGroupId) &&
									((t.IsAutoGenerated && !st.IsPrivate) || st.Scaffold.ScaffoldGroup.UploaderId == userId)
							select new { s.ScaffoldGroupId, t.Name })
							.ToListAsync();

			return tags
				.GroupBy(t => t.ScaffoldGroupId)
				.ToDictionary(g => g.Key, g => g.Select(t => t.Name).Distinct().ToList());
		}

	}
}


